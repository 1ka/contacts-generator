package com.inazaruk.contactsgen;

import android.app.Activity;
import android.content.ContentProviderOperation;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.os.AsyncTask;
import android.os.Bundle;
import android.provider.ContactsContract;
import android.provider.ContactsContract.CommonDataKinds;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.ProgressBar;
import android.widget.SeekBar;
import android.widget.SeekBar.OnSeekBarChangeListener;
import android.widget.TextView;

import java.io.ByteArrayOutputStream;
import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Random;

public class MainActivity extends Activity implements OnClickListener, OnSeekBarChangeListener {
    private static final String TAG = MainActivity.class.getSimpleName();
    private static final String AUTOGENERATED_TAG = "autogenerated";

    private static final List<Integer> sColors;

    private TextView mContactsCountTextView;
    private SeekBar mSeekBar;
    private TextView mGenerateCountTextView;
    private Button mGenerateButton;
    private Button mClearButton;
    private ProgressBar mProgressBar;
    private TextView mProgressCountTextView;
    private Button mCancelButton;
    
    private AsyncTask<?, ?, ?> mTask = null;
    
    static {
        Field [] fields = Color.class.getDeclaredFields();
        List<Integer> colors = new ArrayList<Integer>();
        for(Field field : fields) {
            if(Modifier.isStatic(field.getModifiers()) &&
               Modifier.isPublic(field.getModifiers()) &&
               field.getType().equals(int.class)) {
               
               try {
                   colors.add(field.getInt(null));
               } catch(Exception ex) {
                   Log.e(TAG, "Failed to get color field value: " + field.getName(), ex);
                   //Ignore
               }
            }
        }
        sColors = Collections.unmodifiableList(colors);
    }
    
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
        
        
        mContactsCountTextView = (TextView)findViewById(R.id.contacts_count);
        mSeekBar = (SeekBar)findViewById(R.id.seekbar);
        mGenerateCountTextView = (TextView)findViewById(R.id.generate_count);
        mGenerateButton = (Button) findViewById(R.id.generate);
        mClearButton = (Button) findViewById(R.id.clear);
        mProgressBar = (ProgressBar) findViewById(R.id.progress);
        mProgressCountTextView = (TextView) findViewById(R.id.progress_count);
        mCancelButton = (Button) findViewById(R.id.cancel);
        
        mSeekBar.setOnSeekBarChangeListener(this);
        mGenerateButton.setOnClickListener(this);
        mClearButton.setOnClickListener(this);
        mCancelButton.setOnClickListener(this);
        
        mSeekBar.setProgress(10);
        setProgressState(false);
        syncGenerateCountTextView();
        updateAutogeneratedCount();
    }
    
    @Override
    public void onClick(View v) {
        if(v == mGenerateButton) {
            mTask = new Generator().execute(getGenerateCount());
            setProgressState(true);
            setProgress(0, 0);
        } else if(v == mClearButton) {
            mTask = new Cleaner().execute();
            setProgressState(true);
            setProgress(0, 0);
        } else if(v == mCancelButton) {
            if(mTask != null) {
                mTask.cancel(true);
            }
        }
    }
    
    private void updateAutogeneratedCount() {
        Cursor cursor = getContentResolver().query(ContactsContract.Data.CONTENT_URI, 
                new String[] { ContactsContract.Data.CONTACT_ID }, 
                ContactsContract.Data.MIMETYPE + " = ? and " + CommonDataKinds.Note.NOTE + " = ?",
                new String[] { CommonDataKinds.Note.CONTENT_ITEM_TYPE, AUTOGENERATED_TAG}, 
                ContactsContract.Data.CONTACT_ID + " ASC");
        
        int count = 0;
        String previousId = null;
        if(cursor.moveToFirst()) {
            do {
                String id = cursor.getString(cursor.getColumnIndex(ContactsContract.Data.CONTACT_ID));
                if(!id.equals(previousId)) {
                    count++;
                    previousId = id;
                }
            } while(cursor.moveToNext());
        }
        cursor.close();
        mContactsCountTextView.setText(getString(R.string.autogenerated_contacts, count));
    }
    
    private int getGenerateCount() {
        int min = 1;
        int max = mSeekBar.getMax();
        int cur = mSeekBar.getProgress();
                
        int threshold = max / 2;
        
        if(cur < threshold) {
            return cur;
        }
        
        return threshold + (cur - threshold) * 10;
    }
    
    private void syncGenerateCountTextView() {
        mGenerateCountTextView.setText(Integer.toString(getGenerateCount()));
    }
    
    @Override
    public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
        syncGenerateCountTextView();
    }
    
    @Override
    public void onStartTrackingTouch(SeekBar seekBar) {
        syncGenerateCountTextView();
    }
    
    @Override
    public void onStopTrackingTouch(SeekBar seekBar) {
        syncGenerateCountTextView();
    }
    
    public void setProgressState(boolean inProgress) {
        mSeekBar.setEnabled(!inProgress);
        mGenerateCountTextView.setEnabled(!inProgress);
        mGenerateButton.setEnabled(!inProgress);
        mClearButton.setEnabled(!inProgress);
        
        int visibility = View.GONE;
        if(inProgress) {
            visibility = View.VISIBLE;
            
        } 
        
        mProgressBar.setVisibility(visibility);
        mProgressCountTextView.setVisibility(visibility);
        mCancelButton.setVisibility(visibility);
    }
    
    public void setProgress(int current, int max) {
        mProgressBar.setMax(max);
        mProgressBar.setProgress(current);
        mProgressCountTextView.setText(String.format("%d/%d", current + 1, max));
    }
    
    private Bitmap generateBitmap(int x, int y, Random random) {
        Bitmap bitmap = Bitmap.createBitmap(x, y, Config.ARGB_8888);
        Canvas canvas = new Canvas(bitmap);
        
        int color = Color.GREEN;
        if(sColors.size() > 0) {
            int index = random.nextInt(sColors.size());
            color = sColors.get(index);
        }
        canvas.drawColor(color);
        
        int circleCount = random.nextInt(20) + 5;
        for(int i = 0; i < circleCount; i++) {
            int cx = random.nextInt(x);
            int cy = random.nextInt(y);
            int radius = random.nextInt((x + y) / 10);
            int ccolor = Color.LTGRAY;
            if(sColors.size() > 0) {
                int index = random.nextInt(sColors.size());
                ccolor = sColors.get(index);
            }
            
            Paint paint = new Paint();
            paint.setColor(ccolor);
            paint.setAntiAlias(true);
            paint.setAlpha(random.nextInt(200) + 55);
            
            canvas.drawCircle(cx, cy, radius, paint);
        }
        
        return bitmap;
    }
    
    private boolean addContact(String displayName, String emailId, 
                            String mobileNumber,String workNumber, String homeNumber, 
                            Bitmap image) {
        
        ArrayList<ContentProviderOperation> ops = new ArrayList<ContentProviderOperation>();

        ops.add(ContentProviderOperation.newInsert(ContactsContract.RawContacts.CONTENT_URI)
            .withValue(ContactsContract.RawContacts.ACCOUNT_TYPE, null)
            .withValue(ContactsContract.RawContacts.ACCOUNT_NAME, null)
            .build());

        //Names
        if(displayName != null)
        {           
            ops.add(ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)
                .withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0)
                .withValue(ContactsContract.Data.MIMETYPE, CommonDataKinds.StructuredName.CONTENT_ITEM_TYPE)
                .withValue(CommonDataKinds.StructuredName.DISPLAY_NAME, displayName)
                .build());
        } 

        //Mobile Number
        if(mobileNumber != null)
        {
            ops.add(ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)
            .withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0)
            .withValue(ContactsContract.Data.MIMETYPE, CommonDataKinds.Phone.CONTENT_ITEM_TYPE)
            .withValue(CommonDataKinds.Phone.NUMBER, mobileNumber)
            .withValue(CommonDataKinds.Phone.TYPE, CommonDataKinds.Phone.TYPE_MOBILE)
            .build());
        }

        //Home Numbers
        if(homeNumber != null)
        {
            ops.add(ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)
                .withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0)
                .withValue(ContactsContract.Data.MIMETYPE, CommonDataKinds.Phone.CONTENT_ITEM_TYPE)
                .withValue(CommonDataKinds.Phone.NUMBER, homeNumber)
                .withValue(CommonDataKinds.Phone.TYPE, CommonDataKinds.Phone.TYPE_HOME)
                .build());
        }

        //Work Numbers
        if(workNumber != null)
        {
            ops.add(ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)
                .withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0)
                .withValue(ContactsContract.Data.MIMETYPE, CommonDataKinds.Phone.CONTENT_ITEM_TYPE)
                .withValue(CommonDataKinds.Phone.NUMBER, workNumber)
                .withValue(CommonDataKinds.Phone.TYPE, CommonDataKinds.Phone.TYPE_WORK)
                .build());
        }

        //Email
        if(emailId != null)
        {
             ops.add(ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)
                .withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0)
                .withValue(ContactsContract.Data.MIMETYPE, CommonDataKinds.Email.CONTENT_ITEM_TYPE)
                .withValue(CommonDataKinds.Email.DATA, emailId)
                .withValue(CommonDataKinds.Email.TYPE, CommonDataKinds.Email.TYPE_WORK)
                .build());
        }
        
        if(image != null) {
            ByteArrayOutputStream stream = new ByteArrayOutputStream();
            image.compress(Bitmap.CompressFormat.PNG , 75, stream);

            ops.add(ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)
                    .withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0) 
                   .withValue(ContactsContract.Data.IS_SUPER_PRIMARY, 1)
                   .withValue(ContactsContract.Data.MIMETYPE,CommonDataKinds.Photo.CONTENT_ITEM_TYPE)
                   .withValue(CommonDataKinds.Photo.PHOTO, stream.toByteArray())
                   .build());
        }
        
        ops.add(ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)
                .withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0)
                .withValue(ContactsContract.Data.MIMETYPE, CommonDataKinds.Note.CONTENT_ITEM_TYPE)
                .withValue(CommonDataKinds.Note.NOTE, AUTOGENERATED_TAG)
                .build());

        // Asking the Contact provider to create a new contact
        try 
        {
            getContentResolver().applyBatch(ContactsContract.AUTHORITY, ops);
            return true;
        } 
        catch (Exception e) 
        {
            return false;
        }
    }
    
    private void onTaskCompelted() {
        setProgressState(false);
        updateAutogeneratedCount();
    }
    
    private class Generator extends AsyncTask<Integer, Integer, Void> {
        @Override
        protected Void doInBackground(Integer... params) {
            
            String alphabet = "#ABCDEFGHIJKLMNOPQRSTUVWXYZ";
            
            int size = 512;
            int minPhone = 1000000;
            int maxPhone = 9999999;
            String names [] = new String[] { "test", "John", "Dou", "Angel", "Devil", "Hacker" };
            int [] nameCounters = new int[names.length];
            
            int count = params[0];
            Random random = new Random();
            for(int i = 0; i < count && !isCancelled(); i++) {
                int firstCharIndex = random.nextInt(alphabet.length());
                int nameIndex = random.nextInt(names.length);
                
                String firstChar = alphabet.substring(firstCharIndex, firstCharIndex + 1);
                String name = firstChar + names[nameIndex] + nameCounters[nameIndex];
                nameCounters[nameIndex]++;
                
                String email = name.toLowerCase() + "@example.com";
                String mobile = Integer.toString(minPhone + random.nextInt(maxPhone - minPhone));
                String work = Integer.toString(minPhone + random.nextInt(maxPhone - minPhone));
                String home = Integer.toString(minPhone + random.nextInt(maxPhone - minPhone));
                Bitmap bitmap = generateBitmap(size, size, random);
                
                addContact(name, email, mobile, work, home, bitmap);
                bitmap.recycle();
                publishProgress(i, count);
            }
            return null;
        }
        @Override
        protected void onProgressUpdate(Integer... values) {
            setProgress(values[0], values[1]);
        }
        
        @Override
        protected void onPostExecute(Void result) {
            onTaskCompelted();
        }
        
        @Override
        protected void onCancelled() {
            onTaskCompelted();
        }
    }
    
    private class Cleaner extends AsyncTask<Void, Integer, Void> {
        @Override
        protected Void doInBackground(Void... params) {
            Cursor cursor = getContentResolver().query(ContactsContract.Data.CONTENT_URI, 
                    null, 
                    ContactsContract.Data.MIMETYPE + " = ? and " + CommonDataKinds.Note.NOTE + " = ?",
                    new String[] { CommonDataKinds.Note.CONTENT_ITEM_TYPE, AUTOGENERATED_TAG}, 
                    null);
     
           int counter = 0;
           int count = cursor.getCount();
           if(cursor.moveToFirst()) {
               do{
                   String id = cursor.getString(cursor.getColumnIndex(ContactsContract.Data.CONTACT_ID));
                   
                   getContentResolver().delete(ContactsContract.RawContacts.CONTENT_URI,
                                               ContactsContract.RawContacts.CONTACT_ID + " = ?", 
                                               new String[] { id } );
                   publishProgress(counter, count);
                   counter++;
               } while(cursor.moveToNext() && !isCancelled());
           }
           cursor.close();
           return null;
        }
        
        @Override
        protected void onProgressUpdate(Integer... values) {
            setProgress(values[0], values[1]);
        }
        
        @Override
        protected void onPostExecute(Void result) {
            onTaskCompelted();
        }
        
        @Override
        protected void onCancelled() {
            onTaskCompelted();
        }
    }
}